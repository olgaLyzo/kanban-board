{"ast":null,"code":"// import { TaskContext } from './task-context';\n// import { useEffect, useState } from 'react';\n\n// export const TaskProvider = (props) => {\n// \tconst [tasks, setTasks] = useState([]);\n// \tconst[isLoaded, setIsLoaded] = useEffect(false);\n\n// \tconst [states] = useState([\n// \t\t{id:1, name: 'backlog', state:'backlog'},\n// \t\t{id:2, name: 'ready', state:'ready'},\n// \t\t{id:3, name: 'in progress', state:'inProgress'},\n// \t\t{id:4, name: 'finished', state:'finished'}\n// \t])\n// \tconst findById = (id)=> tasks.find((task)=> task.id === parseInt(id));\n\n// \t// const context = {\n// \t// states,\n// \taddTask: (name,state) =>{\n// \t\tconst task = {\n// \t\t\tid: tasks.length + 1,\n// \t\t\tname,\n// \t\t\tstate\n// \t\t}\n// \t\tsetTasks([...tasks, task])\n// \t},\n// \tupdateTask: (item)=> {\n// \t\tconst task = findById(item.id);\n// \t\ttask.name = item.name;\n// \t\ttask.description = item.description;\n// \t\tsetTasks([...tasks])\n// \t},\n// \tremoveTask: (id) => {\n// \t\tconst task = findById(id);\n// \t\tif(task){\n// \t\t\tsetTasks([...tasks.filter(item=> item.id !== task.id)])\n// \t\t} \n// \t},\n// \tgetTaskById: findById,\n// \tgetTasksByState: (state) =>{\n// \t\treturn tasks.filter(task => task.state === state);\n// \t},\n// \tgetTasksByExcludedState: (state) => {\n// \t\treturn tasks.filter(task => task.state !== state);\n// \t},\n// \tmoveTask: (id, state) => {\n// \t\tconst task = findById(id);\n// \t\tif (task) {\n// \t\t\ttask.state = state;\n// \t\t}\n// \t\tsetTasks([...tasks]);\n// \t},\n// \tgetActiveTaskCount: () =>\n// \t\ttasks.filter(task => task.state === 'ready' || task.state === 'inProgress').length,\n// \tgetFinishedTaskCount: ()=>\n// \t\ttasks.filter(task => task.state === 'finished').length,\t\n\n// }\n// \treturn <TaskContext.Provider value={context}> {isLoaded && props.children}</TaskContext.Provider>\n// }","map":{"version":3,"names":[],"sources":["/Users/olyalyzo/projects/canban-board/src/hooks/tasks/task-provider.jsx"],"sourcesContent":["// import { TaskContext } from './task-context';\n// import { useEffect, useState } from 'react';\n\n// export const TaskProvider = (props) => {\n// \tconst [tasks, setTasks] = useState([]);\n// \tconst[isLoaded, setIsLoaded] = useEffect(false);\n\n// \tconst [states] = useState([\n// \t\t{id:1, name: 'backlog', state:'backlog'},\n// \t\t{id:2, name: 'ready', state:'ready'},\n// \t\t{id:3, name: 'in progress', state:'inProgress'},\n// \t\t{id:4, name: 'finished', state:'finished'}\n// \t])\n// \tconst findById = (id)=> tasks.find((task)=> task.id === parseInt(id));\n\n// \t// const context = {\n\t// \t// states,\n\t// \taddTask: (name,state) =>{\n\t// \t\tconst task = {\n\t// \t\t\tid: tasks.length + 1,\n\t// \t\t\tname,\n\t// \t\t\tstate\n\t// \t\t}\n\t// \t\tsetTasks([...tasks, task])\n\t// \t},\n\t// \tupdateTask: (item)=> {\n\t// \t\tconst task = findById(item.id);\n\t// \t\ttask.name = item.name;\n\t// \t\ttask.description = item.description;\n\t// \t\tsetTasks([...tasks])\n\t// \t},\n\t// \tremoveTask: (id) => {\n\t// \t\tconst task = findById(id);\n\t// \t\tif(task){\n\t// \t\t\tsetTasks([...tasks.filter(item=> item.id !== task.id)])\n\t// \t\t} \n\t// \t},\n\t// \tgetTaskById: findById,\n\t// \tgetTasksByState: (state) =>{\n\t// \t\treturn tasks.filter(task => task.state === state);\n\t// \t},\n\t// \tgetTasksByExcludedState: (state) => {\n\t// \t\treturn tasks.filter(task => task.state !== state);\n\t// \t},\n\t// \tmoveTask: (id, state) => {\n\t// \t\tconst task = findById(id);\n\t// \t\tif (task) {\n\t// \t\t\ttask.state = state;\n\t// \t\t}\n\t// \t\tsetTasks([...tasks]);\n\t// \t},\n\t// \tgetActiveTaskCount: () =>\n\t// \t\ttasks.filter(task => task.state === 'ready' || task.state === 'inProgress').length,\n\t// \tgetFinishedTaskCount: ()=>\n\t// \t\ttasks.filter(task => task.state === 'finished').length,\t\n\t\t\n\t// }\n// \treturn <TaskContext.Provider value={context}> {isLoaded && props.children}</TaskContext.Provider>\n// }"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACD;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}