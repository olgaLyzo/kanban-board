{"ast":null,"code":"var _jsxFileName = \"/Users/olyalyzo/projects/canban-board/src/hooks/tasks/task-provider.jsx\",\n  _s = $RefreshSig$();\nimport { TaskContext } from './task-context';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskProvider = props => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isLoaded, setIsLoaded] = useEffect(false);\n  const [states] = useState([{\n    id: 1,\n    name: 'backlog',\n    state: 'backlog'\n  }, {\n    id: 2,\n    name: 'ready',\n    state: 'ready'\n  }, {\n    id: 3,\n    name: 'in progress',\n    state: 'inProgress'\n  }, {\n    id: 4,\n    name: 'finished',\n    state: 'finished'\n  }]);\n  const findById = id => tasks.find(task => task.id === parseInt(id));\n\n  // const context = {\n  // \t// states,\n  // \taddTask: (name,state) =>{\n  // \t\tconst task = {\n  // \t\t\tid: tasks.length + 1,\n  // \t\t\tname,\n  // \t\t\tstate\n  // \t\t}\n  // \t\tsetTasks([...tasks, task])\n  // \t},\n  // \tupdateTask: (item)=> {\n  // \t\tconst task = findById(item.id);\n  // \t\ttask.name = item.name;\n  // \t\ttask.description = item.description;\n  // \t\tsetTasks([...tasks])\n  // \t},\n  // \tremoveTask: (id) => {\n  // \t\tconst task = findById(id);\n  // \t\tif(task){\n  // \t\t\tsetTasks([...tasks.filter(item=> item.id !== task.id)])\n  // \t\t} \n  // \t},\n  // \tgetTaskById: findById,\n  // \tgetTasksByState: (state) =>{\n  // \t\treturn tasks.filter(task => task.state === state);\n  // \t},\n  // \tgetTasksByExcludedState: (state) => {\n  // \t\treturn tasks.filter(task => task.state !== state);\n  // \t},\n  // \tmoveTask: (id, state) => {\n  // \t\tconst task = findById(id);\n  // \t\tif (task) {\n  // \t\t\ttask.state = state;\n  // \t\t}\n  // \t\tsetTasks([...tasks]);\n  // \t},\n  // \tgetActiveTaskCount: () =>\n  // \t\ttasks.filter(task => task.state === 'ready' || task.state === 'inProgress').length,\n  // \tgetFinishedTaskCount: ()=>\n  // \t\ttasks.filter(task => task.state === 'finished').length,\t\n\n  // }\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: context,\n    children: [\" \", isLoaded && props.children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskProvider, \"uMMeXOvBNpIlRKbUByqkHZcQ0IE=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["TaskContext","useEffect","useState","jsxDEV","_jsxDEV","TaskProvider","props","_s","tasks","setTasks","isLoaded","setIsLoaded","states","id","name","state","findById","find","task","parseInt","Provider","value","context","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/olyalyzo/projects/canban-board/src/hooks/tasks/task-provider.jsx"],"sourcesContent":["import { TaskContext } from './task-context';\nimport { useEffect, useState } from 'react';\n\nexport const TaskProvider = (props) => {\n\tconst [tasks, setTasks] = useState([]);\n\tconst[isLoaded, setIsLoaded] = useEffect(false);\n\n\tconst [states] = useState([\n\t\t{id:1, name: 'backlog', state:'backlog'},\n\t\t{id:2, name: 'ready', state:'ready'},\n\t\t{id:3, name: 'in progress', state:'inProgress'},\n\t\t{id:4, name: 'finished', state:'finished'}\n\t])\n\tconst findById = (id)=> tasks.find((task)=> task.id === parseInt(id));\n\n\t// const context = {\n\t// \t// states,\n\t// \taddTask: (name,state) =>{\n\t// \t\tconst task = {\n\t// \t\t\tid: tasks.length + 1,\n\t// \t\t\tname,\n\t// \t\t\tstate\n\t// \t\t}\n\t// \t\tsetTasks([...tasks, task])\n\t// \t},\n\t// \tupdateTask: (item)=> {\n\t// \t\tconst task = findById(item.id);\n\t// \t\ttask.name = item.name;\n\t// \t\ttask.description = item.description;\n\t// \t\tsetTasks([...tasks])\n\t// \t},\n\t// \tremoveTask: (id) => {\n\t// \t\tconst task = findById(id);\n\t// \t\tif(task){\n\t// \t\t\tsetTasks([...tasks.filter(item=> item.id !== task.id)])\n\t// \t\t} \n\t// \t},\n\t// \tgetTaskById: findById,\n\t// \tgetTasksByState: (state) =>{\n\t// \t\treturn tasks.filter(task => task.state === state);\n\t// \t},\n\t// \tgetTasksByExcludedState: (state) => {\n\t// \t\treturn tasks.filter(task => task.state !== state);\n\t// \t},\n\t// \tmoveTask: (id, state) => {\n\t// \t\tconst task = findById(id);\n\t// \t\tif (task) {\n\t// \t\t\ttask.state = state;\n\t// \t\t}\n\t// \t\tsetTasks([...tasks]);\n\t// \t},\n\t// \tgetActiveTaskCount: () =>\n\t// \t\ttasks.filter(task => task.state === 'ready' || task.state === 'inProgress').length,\n\t// \tgetFinishedTaskCount: ()=>\n\t// \t\ttasks.filter(task => task.state === 'finished').length,\t\n\t\t\n\t// }\n\treturn <TaskContext.Provider value={context}> {isLoaded && props.children}</TaskContext.Provider>\n}"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAK,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGV,SAAS,CAAC,KAAK,CAAC;EAE/C,MAAM,CAACW,MAAM,CAAC,GAAGV,QAAQ,CAAC,CACzB;IAACW,EAAE,EAAC,CAAC;IAAEC,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAC;EAAS,CAAC,EACxC;IAACF,EAAE,EAAC,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAC;EAAO,CAAC,EACpC;IAACF,EAAE,EAAC,CAAC;IAAEC,IAAI,EAAE,aAAa;IAAEC,KAAK,EAAC;EAAY,CAAC,EAC/C;IAACF,EAAE,EAAC,CAAC;IAAEC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAC;EAAU,CAAC,CAC1C,CAAC;EACF,MAAMC,QAAQ,GAAIH,EAAE,IAAIL,KAAK,CAACS,IAAI,CAAEC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKM,QAAQ,CAACN,EAAE,CAAC,CAAC;;EAErE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,oBAAOT,OAAA,CAACJ,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAEC,OAAQ;IAAAC,QAAA,GAAC,GAAC,EAACb,QAAQ,IAAIJ,KAAK,CAACiB,QAAQ;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAClG,CAAC;AAAApB,EAAA,CAvDYF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}