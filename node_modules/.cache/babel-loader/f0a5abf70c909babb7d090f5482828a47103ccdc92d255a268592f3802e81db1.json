{"ast":null,"code":"var _jsxFileName = \"/Users/olyalyzo/projects/canban-board/src/hooks/tasks/task-provider.jsx\",\n  _s = $RefreshSig$();\nimport { TaskContext } from './task-context';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskProvider = props => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isLoaded, setIsLoaded] = useEffect(false);\n  const [state] = useState([{\n    id: 1,\n    name: 'backlog',\n    state: 'backlog'\n  }, {\n    id: 2,\n    name: 'ready',\n    state: 'ready'\n  }, {\n    id: 3,\n    name: 'in progress',\n    state: 'inProgress'\n  }, {\n    id: 4,\n    name: 'finished',\n    state: 'finished'\n  }]);\n  const findById = id => tasks.find(task => task.id === parseInt(id));\n  const context = {\n    states,\n    addTask: (name, state) => {\n      const task = {\n        id: tasks.length + 1,\n        name,\n        state\n      };\n      setTasks([...tasks, task]);\n    },\n    updateTask: item => {\n      const task = findById(item.id);\n      task.name = item.name;\n      task.description = item.description;\n      setTasks([...tasks]);\n    },\n    removeTask: id => {\n      const task = findById(id);\n      if (task) {\n        setTasks([...tasks.filter(item => item.id !== task.id)]);\n      }\n    },\n    getTaskById: findById,\n    getTasksByState: state => {\n      return tasks.filter(task => task.state === state);\n    },\n    getTasksByExcludedState: state => {\n      return tasks.filter(task => task.state !== state);\n    },\n    moveTask: (id, state) => {}\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: context,\n    children: [\" \", isLoaded && props.children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskProvider, \"LHzptjkBBbIFXHj5hIMaVQi6UVA=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["TaskContext","useEffect","useState","jsxDEV","_jsxDEV","TaskProvider","props","_s","tasks","setTasks","isLoaded","setIsLoaded","state","id","name","findById","find","task","parseInt","context","states","addTask","length","updateTask","item","description","removeTask","filter","getTaskById","getTasksByState","getTasksByExcludedState","moveTask","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/olyalyzo/projects/canban-board/src/hooks/tasks/task-provider.jsx"],"sourcesContent":["import { TaskContext } from './task-context';\nimport { useEffect, useState } from 'react';\n\nexport const TaskProvider = (props) => {\n\tconst [tasks, setTasks] = useState([]);\n\tconst[isLoaded, setIsLoaded] = useEffect(false);\n\n\tconst [state] = useState([\n\t\t{id:1, name: 'backlog', state:'backlog'},\n\t\t{id:2, name: 'ready', state:'ready'},\n\t\t{id:3, name: 'in progress', state:'inProgress'},\n\t\t{id:4, name: 'finished', state:'finished'}\n\t])\n\tconst findById = (id)=> tasks.find((task)=> task.id === parseInt(id));\n\n\tconst context = {\n\t\tstates,\n\t\taddTask: (name,state) =>{\n\t\t\tconst task = {\n\t\t\t\tid: tasks.length + 1,\n\t\t\t\tname,\n\t\t\t\tstate\n\t\t\t}\n\n\t\t\tsetTasks([...tasks, task])\n\t\t},\n\t\tupdateTask: (item)=> {\n\t\t\tconst task = findById(item.id);\n\t\t\ttask.name = item.name;\n\t\t\ttask.description = item.description;\n\t\t\tsetTasks([...tasks])\n\t\t},\n\t\tremoveTask: (id) => {\n\t\t\tconst task = findById(id);\n\t\t\tif(task){\n\t\t\t\tsetTasks([...tasks.filter(item=> item.id !== task.id)])\n\t\t\t} \n\t\t},\n\t\tgetTaskById: findById,\n\t\tgetTasksByState: (state) =>{\n\t\t\treturn tasks.filter(task => task.state === state);\n\t\t},\n\t\tgetTasksByExcludedState: (state) => {\n\t\t\treturn tasks.filter(task => task.state !== state);\n\t\t},\n\t\tmoveTask: (id, state) => {\n\t\t\t\n\t\t}\n\t}\n\treturn <TaskContext.Provider value={context}> {isLoaded && props.children}</TaskContext.Provider>\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}