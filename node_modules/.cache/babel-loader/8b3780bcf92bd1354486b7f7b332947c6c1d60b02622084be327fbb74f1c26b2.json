{"ast":null,"code":"// import {TaskContext} from \"./task-context\";\n// import {useEffect, useState} from \"react\";\n\n// /*\n\n// State\n// {\n//  id: number,\n//  name: string,\n//  state: string\n// }\n\n// {\n\n// Task\n// {\n//     id: number,\n//     name: string,\n//     description: string | undefined\n//     state: string => state.state\n// }\n\n//  */\n\n// export const TaskProvider = (props) => {\n//     const [tasks, setTasks] = useState([]);\n//     const [isLoaded, setIsLoaded] = useState(false);\n//     const [idCounter, setIdCounter] = useState(0);\n\n//     const states = useState([\n//         {id: 1, name: 'backlog', state: 'backlog'},\n//         {id: 2, name: 'ready', state: 'ready'},\n//         {id: 3, name: 'in progress', state: 'inProgress'},\n//         {id: 4, name: 'finished', state: 'finished'}\n//     ]);\n\n//     const findById = (id) => tasks.find((task) => task.id === parseInt(id));\n\n//     useEffect(() => {\n//         if (isLoaded) {\n//             localStorage.setItem('tasks', JSON.stringify(tasks))\n//         }\n//     }, [tasks, isLoaded])\n\n//     useEffect(() => {\n//         const tasks = localStorage.getItem('tasks');\n//         if (tasks) {\n//             setTasks(JSON.parse(tasks))\n//         }\n//         setIsLoaded(true);\n//     }, [])\n\n//     const context = {\n//         states,\n//         addTask: (name) => {\n//             const id = idCounter + 1;\n//             const task = {\n//                 id,\n//                 name,\n//                 state: 'backlog'\n//             }\n\n//             setIdCounter(id);\n//             setTasks([...tasks, task])\n//         },\n//         updateTask: (item) => {\n//             const task = findById(item.id);\n//             task.name = item.name;\n//             task.description = item.description;\n//             setTasks([...tasks])\n//         },\n//         removeTask: (id) => {\n//             const task = findById(id);\n//             if (task) {\n//                 setTasks([...tasks.filter(item => item.id !== task.id)])\n//             }\n//         },\n//         getTaskById: findById,\n//         getTasksByState: (state) => {\n//             return tasks.filter(task => task.state === state);\n//         },\n//         getTasksByExcludedState: (state) => {\n//             return tasks.filter(task => task.state !== state);\n//         },\n//         moveTask: (id, state) => {\n//             const task = findById(id);\n//             if (task) {\n//                 task.state = state;\n//             }\n//             setTasks([...tasks]);\n//         },\n//         getActiveTaskCount: () =>\n//             tasks.filter(task => task.state === 'ready' || task.state === 'inProgress').length,\n//         getFinishedTaskCount: () =>\n//             tasks.filter(task => task.state === 'finished').length,\n//     }\n\n//     return <TaskContext.Provider value={context}>{isLoaded && props.children}</TaskContext.Provider>\n// }","map":{"version":3,"names":[],"sources":["/Users/olyalyzo/projects/canban-board/src/hooks/tasks/task-provider.jsx"],"sourcesContent":["// import {TaskContext} from \"./task-context\";\n// import {useEffect, useState} from \"react\";\n\n// /*\n\n// State\n// {\n//  id: number,\n//  name: string,\n//  state: string\n// }\n\n// {\n\n// Task\n// {\n//     id: number,\n//     name: string,\n//     description: string | undefined\n//     state: string => state.state\n// }\n\n//  */\n\n// export const TaskProvider = (props) => {\n//     const [tasks, setTasks] = useState([]);\n//     const [isLoaded, setIsLoaded] = useState(false);\n//     const [idCounter, setIdCounter] = useState(0);\n\n//     const states = useState([\n//         {id: 1, name: 'backlog', state: 'backlog'},\n//         {id: 2, name: 'ready', state: 'ready'},\n//         {id: 3, name: 'in progress', state: 'inProgress'},\n//         {id: 4, name: 'finished', state: 'finished'}\n//     ]);\n\n//     const findById = (id) => tasks.find((task) => task.id === parseInt(id));\n\n\n//     useEffect(() => {\n//         if (isLoaded) {\n//             localStorage.setItem('tasks', JSON.stringify(tasks))\n//         }\n//     }, [tasks, isLoaded])\n\n//     useEffect(() => {\n//         const tasks = localStorage.getItem('tasks');\n//         if (tasks) {\n//             setTasks(JSON.parse(tasks))\n//         }\n//         setIsLoaded(true);\n//     }, [])\n\n//     const context = {\n//         states,\n//         addTask: (name) => {\n//             const id = idCounter + 1;\n//             const task = {\n//                 id,\n//                 name,\n//                 state: 'backlog'\n//             }\n\n//             setIdCounter(id);\n//             setTasks([...tasks, task])\n//         },\n//         updateTask: (item) => {\n//             const task = findById(item.id);\n//             task.name = item.name;\n//             task.description = item.description;\n//             setTasks([...tasks])\n//         },\n//         removeTask: (id) => {\n//             const task = findById(id);\n//             if (task) {\n//                 setTasks([...tasks.filter(item => item.id !== task.id)])\n//             }\n//         },\n//         getTaskById: findById,\n//         getTasksByState: (state) => {\n//             return tasks.filter(task => task.state === state);\n//         },\n//         getTasksByExcludedState: (state) => {\n//             return tasks.filter(task => task.state !== state);\n//         },\n//         moveTask: (id, state) => {\n//             const task = findById(id);\n//             if (task) {\n//                 task.state = state;\n//             }\n//             setTasks([...tasks]);\n//         },\n//         getActiveTaskCount: () =>\n//             tasks.filter(task => task.state === 'ready' || task.state === 'inProgress').length,\n//         getFinishedTaskCount: () =>\n//             tasks.filter(task => task.state === 'finished').length,\n//     }\n\n//     return <TaskContext.Provider value={context}>{isLoaded && props.children}</TaskContext.Provider>\n// }"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}